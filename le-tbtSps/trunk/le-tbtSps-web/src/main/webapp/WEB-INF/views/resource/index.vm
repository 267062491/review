<!DOCTYPE html>
<html lang="zh-cn">
    <head>
        #parse("/layout/head.vm")
        <link rel="stylesheet" type="text/css" href="#springUrl('')/static/css/ztree/demo.css"/>
        <link rel="stylesheet" type="text/css" href="#springUrl('')/static/css/ztree/metroStyle.css"/>
        <link rel="stylesheet" type="text/css" href="#springUrl('')/static/css/ztree/TreeGrid.css"/>
        <script type="text/javascript" src="#springUrl('')/static/js/ztree/jquery.ztree.core-3.5new.js"></script>
        <script type="text/javascript" src="#springUrl('')/static/js/ztree/jquery.ztree.excheck-3.5.min.js"></script>
        <script type="text/javascript" src="#springUrl('')/static/js/ztree/jquery.ztree.exedit-3.5.min.js"></script>
        <script type="text/javascript" src="#springUrl('')/static/js/ztree/TreeGrid.js"></script>
        <script type="text/javascript">
            var setting = {
                view: {
                    addHoverDom: addHoverDom,
                    removeHoverDom: removeHoverDom
                },
                data: {
                    simpleData: {
                        enable: true
                    }
                },
                edit: {
                    enable: true,
                    showRenameBtn: true,
                    showRemoveBtn: true
                },
                callback:{
                    onClick: zTreeOnClick,
                    beforeRemove: zTreeBeforeRemove,
                    beforeEditName: zTreeBeforeEditName
                }  ,
                async: {
                    enable: true,
                    url:basePath + "/resource/initTree",
                    autoParam:["id", "name=n", "level=lv"],
                    otherParam:{"otherParam":"zTreeAsyncTest"},
                    dataFilter: filter
                }

            };

            function filter(treeId, parentNode, childNodes) {
                if (!childNodes) return null;
                for (var i=0, l=childNodes.result.length; i<l; i++) {
                    childNodes.result[i].name = childNodes.result[i].name.replace(/\.n/g, '.');
                }
                return childNodes.result;
            }


            var newtreeNode; //新生产节点
            var zTree;
            $(document).ready(function(){

                $.fn.zTree.init($("#treeDemo"), setting);
            });

            //当鼠标移动到节点上时，显示用户自定义控件
            function addHoverDom(treeId, treeNode) {
                zTree = $.fn.zTree.getZTreeObj("treeDemo")
                newtreeNode=treeNode;
                var sObj = $("#" + treeNode.tId + "_span");
                if (treeNode.editNameFlag || $("#addBtn_"+treeNode.tId).length>0) return;
                var addStr = "<span class='button add' id='addBtn_" + treeNode.tId
                        + "' title='add node' onfocus='this.blur();'></span>";
                sObj.after(addStr);
                var btn = $("#addBtn_"+treeNode.tId);
                if (btn) btn.bind("click", function(){
                    $("#parentCode").val(treeNode.id);
                    $("#level").val(treeNode.level);
                    dialog.openUrlContent({
                        id : "addChildren",
                        title:"添加新节点",
                        url:basePath + "/resource/addForward"
                    });
                    return false;
                });
            };

            //当鼠标移出节点时，移除用户自定义控件
            function removeHoverDom(treeId, treeNode) {
                $("#addBtn_"+treeNode.tId).unbind().remove();
            };

            //节点被点击的事件回调函数
            function zTreeOnClick(event, treeId, treeNode) {
                //alert(treeNode.tId + ", " + treeNode.name);
                //打开treeGrid
                jQuery.post(basePath + "/resource/queryResourceListByLikeCode",
                        {resourceCode:treeNode.id},
                        function(data) {
                            var alertMsg = data.message;
                            if(jQuery.trim(alertMsg).length > 0 ){
                                if(data.code == "200"){
                                    config.data=data.result;
                                    //创建一个组件对象
                                    $("#tg1").remove();
                                    treeGrid = new TreeGrid(config);
                                    treeGrid.show();
                                }else{
                                    dialog.alert(alertMsg);
                                }
                            }
                        }
                );
            }

            //点击删除操作
            function zTreeBeforeRemove(treeId, treeNode) {
                jQuery.post(basePath + "/resource/deleteTreeNode",
                        {resourceCode:treeNode.id},
                        function(data) {
                            var alertMsg = data.message;
                            if(data.code == "200"){    //回台返回成功
                                return true;    //实现删除
                            }else{
                                dialog.alert(alertMsg);      //提示删除失败原因
                                return false;    //不删除
                            }
                        }
                );
            }

            function zTreeBeforeEditName(treeId, treeNode) {
                var btn = "#"+treeNode.tId+"_edit";
                    $("#parentCode").val(treeNode.id);
                    $("#level").val(treeNode.level);
                    dialog.openUrlContent({
                        id : "addChildren",
                        title:"修改节点",
                        data:{resourceCode:treeNode.id},
                        url:basePath + "/resource/getResourceByCode"
                    });
                return false ;
            }
        </script>
    </head>
    <body>
    <input id="parentCode" type="text" value="" style="display: none;"/>
    <input id="level" type="text" value="" style="display: none;"/>
    <h1></h1>
    <h6></h6>
    <div class="content_wrap">
        <div class="zTreeDemoBackground left">
            <ul id="treeDemo" class="ztree"></ul>
        </div>
        <div id="div1" class="right">
        </div>

    </div>
    <script type="text/javascript">
        var config = {
            id: "tg1",
            width: "800",
            renderTo: "div1",
            headerAlign: "left",
            headerHeight: "30",
            dataAlign: "left",
            indentation: "20",
            folderOpenIcon: "#springUrl('')/static/images/folderOpen.gif",
            folderCloseIcon: "#springUrl('')/static/images/folderClose.gif",
            defaultLeafIcon: "#springUrl('')/static/images/defaultLeaf.gif",
            hoverRowBackground: "false",
            folderColumnIndex: "0",
//            itemClick: "itemClickEvent",
            columns: [
                //{ headerText: "", headerAlign: "center", dataAlign: "center", width: "20", handler: "customCheckBox" },
                {headerText: "", headerAlign: "center", dataAlign: "center", width: "20" },
                { headerText: "平台", dataField: "platfrom", headerAlign: "center", handler: "customOrgName" },
                { headerText: "资源名称", dataField: "name", headerAlign: "center", dataAlign: "center", width: "100" },
                { headerText: "资源URL", dataField: "url", headerAlign: "center", dataAlign: "center", width: "100" },
                { headerText: "优先级", dataField: "orders", headerAlign: "center" },
                { headerText: "图标", dataField: "iconSkin", headerAlign: "center", dataAlign: "center", width: "100" },
                { headerText: "备注", dataField: "note", headerAlign: "center", dataAlign: "center", width: "100" },
                { headerText: "是否菜单", dataField: "buttonFlag", headerAlign: "center"}
            ],
            data: []
        };

        /*
        单击数据行后触发该事件
        id：行的id
        index：行的索引。
        data：json格式的行数据对象。
        */
//        function itemClickEvent(id, index, data) {
//            jQuery("#currentRow").val(id + ", " + index + ", " + TreeGrid.json2str(data));
//        }

        function customOrgName(row, col) {
            var name = row[col.dataField] || "";
            return name;
        }

        //创建一个组件对象
        var treeGrid = new TreeGrid(config);
        treeGrid.show();

    </script>
    </body>
</html>
